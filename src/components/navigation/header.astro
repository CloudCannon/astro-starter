---
import { header } from "../../../data/navigation.json";

interface Props {
  headerStyleOverrides: {
    background_color: string;
    text_color: string;
    hover_text_color: string;
    alternate_logo: {
      image_path: string;
      logo_alt_text: string;
    };
  };
}

// Sort out whether values are overridden by the hero at the top of the page,
// Or use the values set in the site-wide data/navigation.json data file
const headerStyleOverrides = Astro.props.headerStyleOverrides;
const backgroundColor =
  headerStyleOverrides?.background_color ?? header.background_color;
const linkTextColor = headerStyleOverrides?.text_color ?? header.text_color;
const linkHoverColor =
  headerStyleOverrides?.hover_text_color ?? header.hover_text_color;
const logoImagePath =
  headerStyleOverrides?.alternate_logo?.image_path ?? header.logo;
const logoAltText =
  headerStyleOverrides?.alternate_logo?.logo_alt_text ?? header.logo_alt_text;
---

<header
  class="header"
  x-data="{ open: false }"
  x-transition
  style={`background-color: ${backgroundColor}; color: ${linkTextColor};`}>
  <div class="header__container">
    <nav class="header__nav">
      <a class="header__logo-link" href={header.logo_url}>
        <img class="header__logo-image" src={logoImagePath} alt={logoAltText} />
      </a>
      <button
        class="hamburger"
        @click="open = ! open"
        aria-label="Open and close the mobile navigation menu">
        <svg height="16" width="24" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <path
              d="M0 16h24v-2.667H0V16zm0-6.667h24V6.667H0v2.666zM0 0v2.667h24V0H0z"
              id="a">
            </path>
          </defs>
          <g fill="none" fill-rule="evenodd">
            <mask fill="#fff" id="b">
              <use href="#a"> </use>
            </mask>
            <use fill="#000" fill-rule="nonzero" href="#a"> </use>
            <g mask="url(#b)">
              <path d="M-4-8h32v32H-4z" fill="#034AD8"> </path>
            </g>
          </g>
        </svg>
      </button>
      <ul
        class="header__nav-links"
        aria-label="Header navigation links"
        x-show="open"
        x-transition
        @click.outside="open = false">
        {
          header.links.map((link) => {
            return (
              <li class="header__nav-item">
                <a class="header__nav-link" href={link.link}>
                  {link.text}
                </a>
              </li>
            );
          })
        }
      </ul>
    </nav>
  </div>
</header>

<style define:vars={{ linkHoverColor }}>
  .header {
    position: relative;
    z-index: 99;
  }
  .header__container {
    max-width: var(--pageContainer);
    margin: 0 auto;
    padding-inline: var(--pagePadding);
  }

  .header li {
    list-style-type: none;
  }

  .header__nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-block: 1rem;
  }

  .header__logo-image {
    width: 200px;
  }

  .header__nav-links {
    position: absolute;
    z-index: 99;
    background-color: white;
    right: 0;
    bottom: 0;
    top: 5rem;
    left: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    padding: 1rem;
  }
  .header__nav-link {
    cursor: pointer;
  }
  .header__nav-link:hover {
    color: var(--linkHoverColor);
  }

  @media screen and (min-width: 600px) {
    .header__nav-links {
      position: static;
      display: flex !important;
      flex-direction: row;
      justify-content: flex-end;
      padding: 0;
      min-width: none;
      background-color: transparent;
    }
  }

  @media screen and (min-width: 600px) {
    .header__nav-item {
      padding-left: 1rem;
    }
  }

  .hamburger {
    padding: 0.5rem;
    transform: translateX(0.5rem);
    border-radius: 4px;
    cursor: pointer;
  }

  .hamburger:hover {
    background-color: #e5ecfb;
  }

  @media screen and (min-width: 600px) {
    .hamburger {
      display: none;
    }
  }
</style>
